name: Basic CI Workflow

# This workflow demonstrates the fundamentals of GitHub Actions CI/CD
# It runs on every push and pull request to show immediate feedback

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

# Environment variables available to all jobs
env:
  PYTHON_VERSION: '3.9'

jobs:
  # Job 1: Code Quality Checks
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      # Step 3: Cache pip dependencies for faster builds
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('src/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      # Step 4: Install dependencies
      - name: Install dependencies
        run: |
          cd src
          pip install --upgrade pip
          pip install -r requirements.txt
      
      # Step 5: Run flake8 linting
      - name: Lint with flake8
        run: |
          cd src
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings. Line length set to 88 (black default)
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
      
      # Step 6: Check code formatting with black
      - name: Check code formatting
        run: |
          cd src
          black --check --diff .

  # Job 2: Run Tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint  # This job waits for the lint job to complete successfully
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('src/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          cd src
          pip install --upgrade pip
          pip install -r requirements.txt
      
      # Step 7: Run unit tests with pytest
      - name: Run tests with pytest
        run: |
          cd src
          pytest tests/ -v --tb=short
      
      # Step 8: Run tests with coverage
      - name: Run tests with coverage
        run: |
          cd src
          pytest --cov=. --cov-report=xml --cov-report=term-missing tests/
      
      # Step 9: Upload coverage reports (optional)
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./src/coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false  # Don't fail the build if codecov fails

  # Job 3: Build and Test Application
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint, test]  # Wait for both lint and test jobs
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          cd src
          pip install --upgrade pip
          pip install -r requirements.txt
      
      # Step 10: Test if the application starts correctly
      - name: Test application startup
        run: |
          cd src
          # Start the app in background and test if it responds
          python app.py &
          APP_PID=$!
          sleep 5
          
          # Test if the app is responding
          curl -f http://localhost:5000/health || exit 1
          
          # Clean up
          kill $APP_PID
        env:
          ENVIRONMENT: testing
          DEBUG: false

  # Job 4: Security Check
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      # Step 11: Security vulnerability scan
      - name: Install security tools
        run: |
          pip install safety bandit
      
      - name: Check for security vulnerabilities in dependencies
        run: |
          cd src
          safety check -r requirements.txt
      
      - name: Run bandit security linter
        run: |
          cd src
          bandit -r . -f json -o bandit-report.json
          bandit -r . -f txt || true  # Don't fail on bandit issues for now
        continue-on-error: true  # Allow this step to fail without failing the whole job

  # Job 5: Summary
  summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [lint, test, build, security]
    if: always()  # Run even if previous jobs fail
    
    steps:
      - name: Build Summary
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint | ${{ needs.lint.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Test | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ needs.security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow completed at:** $(date)" >> $GITHUB_STEP_SUMMARY